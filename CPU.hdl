// This file is part of coursework 2 for COMP1212
// which follows the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// Written by Sam Wilson

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM=0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time unit. If reset=1 then the
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    /*instruction*/
    Mux16(x = instruction, y = outALU, sel = instruction[15], out = outai);

    /*A*/
    Not(x = instruction[15], out = notA);
    Or(x = instruction[5], y = notA, out = loadA);
    ARegister(in = outai, load = loadA, out = outA, out[0..14] = addressM);

    /*A/M*/
    Mux16(x = outA, y = inM, sel = instruction[12], out = outAorM);

    /*writeM*/
    And(x = instruction[3], y = instruction[15], out = writeM);

    /*ALU*/
    And(x = instruction[11], y = instruction[15], out = ALUzx);
    And(x = instruction[10], y = instruction[15], out = ALUnx);
    Or(x = instruction[9], y = notA, out = ALUzy);
    Or(x = instruction[8], y = notA, out = ALUny);
    And(x = instruction[7], y = instruction[15], out = ALUf);
    And(x = instruction[6], y = instruction[15], out = ALUno);
    ALU(x = outD, y = outAorM, zx = ALUzx, nx = ALUnx, zy = ALUzy, ny = ALUny, f = ALUf, no = ALUno, out = outALU, zr = zr, ng = ng);
    And16(x = outALU, y = true, out = outM);

    /*jump*/
    Not(x = ng, out = notng);
    Not(x = zr, out = notzr);
    And(x = notng, y = notzr, out = ps);
    And(x = zr, y = instruction[1], out = eq);
    And(x = ng, y = instruction[2], out = lt);
    And(x = ps, y = instruction[0], out = gt);
    Or(x = eq, y = lt, out = jump12);
    Or(x = jump12, y = gt, out = jump012);
    And(x = jump012, y = instruction[15], out = jump);

    /*D*/
    DRegister(in = outALU, load = instruction[4], out = outD);

    /*PC*/
    PC(x = outA, reset = reset, load = jump, inc = true, out[0..14] = pc);

    /*addressM*/
   // And16(x = outA, y = true, out[0..14] = addressM, out[15] = false);

}
